{"version":3,"sources":["Store.js","Dashboard.js","App.js","serviceWorker.js","index.js"],"names":["socket","CTX","React","createContext","initialState","general","from","msg","random","reducer","state","action","payload","topic","console","log","type","newState","sendChatAction","value","emit","Store","props","useReducer","dispatch","user","useMemo","Math","toFixed","onChatMessage","useCallback","useEffect","port","process","PORT","io","on","Provider","children","useStyles","makeStyles","theme","root","padding","spacing","margin","flex","display","alignItems","topicsWindow","width","height","borderRight","chatWindow","chatBox","button","Dashboard","classes","useContext","topics","Object","keys","useState","activeTopic","changeActiveTopic","textValue","changeTextValue","className","Paper","elevation","Typography","variant","gutterBottom","List","map","ListItem","onClick","e","target","innerText","key","ListItemText","primary","chat","index","Chip","label","TextField","onChange","Button","color","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c32c3ad7.chunk.js","sourcesContent":["import React, { useMemo, useCallback, useEffect } from 'react';\r\nimport io from 'socket.io-client';\r\n\r\nexport const CTX = React.createContext();\r\n\r\nconst initialState = {\r\n    general: [\r\n        {\r\n            from: 'BOT',\r\n            msg: 'Hello there',\r\n        },\r\n    ],\r\n    random: [\r\n        {\r\n            from: 'BOT',\r\n            msg: 'Hello there',\r\n        },\r\n    ],\r\n};\r\n\r\nfunction reducer(state, action) {\r\n    const { from, msg, topic } = action.payload;\r\n\r\n    console.log('state', state);\r\n\r\n    switch (action.type) {\r\n        case 'RECIVE_MESSAGE':\r\n            console.log('correct action', from, msg, topic);\r\n\r\n            const newState = {\r\n                ...state,\r\n                [topic]: [\r\n                    ...state[topic],\r\n                    {\r\n                        from,\r\n                        msg,\r\n                    },\r\n                ],\r\n            };\r\n\r\n            console.log('new state', newState);\r\n\r\n            return newState;\r\n        default:\r\n            console.log('default');\r\n\r\n            return state;\r\n    }\r\n}\r\n\r\nlet socket;\r\n\r\nfunction sendChatAction(value) {\r\n    socket.emit('chat message', value);\r\n}\r\n\r\nfunction Store(props) {\r\n    const [state, dispatch] = React.useReducer(reducer, initialState);\r\n    const user = useMemo(() => 'User' + Math.random(100).toFixed(2), []);\r\n\r\n    const onChatMessage = useCallback(\r\n        msg => dispatch({ type: 'RECIVE_MESSAGE', payload: msg }),\r\n        [dispatch]\r\n    );\r\n\r\n    useEffect(() => {\r\n        const port = process.env.PORT || ':9290';\r\n        console.log('port', port);\r\n\r\n        socket = io(port);\r\n        socket.on('chat message', onChatMessage);\r\n    }, []);\r\n\r\n    // if (!socket) {\r\n    //     socket = io(':3001');\r\n\r\n    //     socket.on('chat message', function(msg) {\r\n    //         console.log('on chat message', msg);\r\n\r\n    //         dispatch({ type: 'RECIVE_MESSAGE', payload: msg });\r\n    //     });\r\n    // }\r\n\r\n    // const user = 'User' + Math.random(100).toFixed(2);\r\n\r\n    return (\r\n        <CTX.Provider value={{ state, sendChatAction, user }}>\r\n            {props.children}\r\n        </CTX.Provider>\r\n    );\r\n}\r\n\r\nexport default Store;\r\n","import React, { useState, useEffect } from 'react';\r\n\r\nimport { CTX } from './Store';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Chip from '@material-ui/core/Chip';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        padding: theme.spacing(3, 2),\r\n        margin: '50px',\r\n    },\r\n    flex: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n    },\r\n    topicsWindow: {\r\n        width: '30%',\r\n        height: '300px',\r\n        borderRight: '1px solid gray',\r\n    },\r\n    chatWindow: {\r\n        width: '70%',\r\n        height: '300px',\r\n        padding: '20px',\r\n    },\r\n    chatBox: {\r\n        width: '85%',\r\n    },\r\n    button: {\r\n        width: '15%',\r\n    },\r\n}));\r\n\r\nconst Dashboard = () => {\r\n    const classes = useStyles();\r\n\r\n    // CTX store\r\n    const { state, sendChatAction, user } = React.useContext(CTX);\r\n\r\n    const topics = Object.keys(state);\r\n\r\n    // local state\r\n    const [activeTopic, changeActiveTopic] = useState(topics[0]);\r\n    const [textValue, changeTextValue] = useState('');\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Paper elevation={3}>\r\n                <Typography variant=\"h2\" gutterBottom>\r\n                    Chat app\r\n                </Typography>\r\n                <Typography variant=\"h4\" gutterBottom>\r\n                    {activeTopic}\r\n                </Typography>\r\n                <div className={classes.flex}>\r\n                    <div className={classes.topicsWindow}>\r\n                        <List>\r\n                            {topics.map(topic => (\r\n                                <ListItem\r\n                                    onClick={e =>\r\n                                        changeActiveTopic(e.target.innerText)\r\n                                    }\r\n                                    key={topic}\r\n                                    button\r\n                                >\r\n                                    <ListItemText primary={topic} />\r\n                                </ListItem>\r\n                            ))}\r\n                        </List>\r\n                    </div>\r\n                    <div className={classes.chatWindow}>\r\n                        {state[activeTopic].map((chat, index) => (\r\n                            <div className={classes.flex} key={index}>\r\n                                <Chip label={chat.from} />\r\n                                <div>\r\n                                    <Typography variant=\"body1\" gutterBottom>\r\n                                        {chat.msg}\r\n                                    </Typography>\r\n                                </div>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n                <div className={classes.flex}>\r\n                    <TextField\r\n                        label=\"Send a chat\"\r\n                        className={classes.chatBox}\r\n                        value={textValue}\r\n                        onChange={e => changeTextValue(e.target.value)}\r\n                    />\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        className={classes.button}\r\n                        onClick={() => {\r\n                            sendChatAction({\r\n                                from: user,\r\n                                msg: textValue,\r\n                                topic: activeTopic,\r\n                            });\r\n                            changeTextValue('');\r\n                        }}\r\n                    >\r\n                        Send\r\n                    </Button>\r\n                </div>\r\n            </Paper>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Dashboard;\r\n","import React from 'react';\r\n\r\nimport Dashboard from './Dashboard';\r\nimport Store from './Store';\r\n\r\nimport './App.css';\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"App\">\r\n            <Store>\r\n                <Dashboard />\r\n            </Store>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}